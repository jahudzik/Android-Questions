What is Dalvik?
- Process virtual machine in Android operating system

What is ART?
- Android Runtime
- Executes the Dalvik Executable format and Dex bytecode specification
- Introduced in Android 4.4, replaced Dalvik completely in Android 5.0

What's difference between .dex and .odex files?
- An .odex file is an Optimized .dex file, meaning that it has basically been pre-compiled for a specific platform.
- The advantage to this is that startup time is much faster since the VM doesn't have to perform any optimizing at startup/runtime. 
- The disadvantages are 1) That it takes up some extra space and 2) An odexed app won't run properly if it's put onto another device.

What is zygote?
A daemon process whose goal is to launch applications. On each app startup it forks and child process continues.

How to increase heap size for the application?
- Set manifest <application> android:largeHeap attribute for true.
- Most apps should not need this and should instead focus on reducing their overall memory usage for improved performance.

How to specify activity the system can launch to let users manage the memory occupied by the application on the device?
- Pass name of Activity subclass to manifest <application> android:manageSpaceActivity

What are process importance hierarchy levels?
1 Foreground process
2 Visible process
3 Service process
4 Background process
5 Empty process

What is a foreground process?
- (Level 1 in process hierarchy)
- A process that is required for what the user is currently doing. 
- Any of following must be true:
1 Activity that the user is interacting with
2 Service that's bound to the activity that the user is interacting with
3 Service that's running "in the foreground" — the service has called startForeground()
4 Service that's executing one of its lifecycle callbacks 
5 BroadcastReceiver that's executing its onReceive() method

What is a visible process?
- (Level 2 in process hierarchy)
- A process that doesn't have any foreground components, but still can affect what the user sees on screen.
- Any of following must be true:
1 It hosts an Activity that is not in the foreground, but is still visible to the user (its onPause() method has been called). 
2 It hosts a Service that's bound to a visible (or foreground) activity.

What is a service process?
- (Level 3 in process hierarchy)
- A process that is running a service that has been started with the startService() method and does not fall into foreground or visible processes.

What is a background process?
- (Level 4 in process hierarchy)
- A process holding an activity that's not currently visible to the user (the activity's onStop() method has been called).
- System can kill it at any time to reclaim memory for a foreground, visible, or service process.

What is an empty process?
- (Level 5 in process hierarchy)
- A process that doesn't hold any active application components.
- The only reason to keep this kind of process alive is for caching purposes, to improve startup time the next time a component needs to run in it. 

What is a LRU list?
- LRU = least recently used
- List containing running background processes to ensure that the process with the activity that was most recently seen by the user is the last to be killed.

What are the ways to access the UI thread from other threads?
1 Activity.runOnUiThread(Runnable)
2 View.post(Runnable)
3 View.postDelayed(Runnable,long)

What is the purpose of View.post() method?
- It causes the Runnable to be added to the message queue.
- The runnable will be run on the user interface thread.

What classes allow to perform background operations?
A AsyncTask - for short operations (few seconds at most)
B java.util.concurrent classes - for longer operations

What is AsyncTask?
- It allows to perform background operations and publish results on the UI thread without having to manipulate threads and/or handlers.
- It is defined by 3 generic types, called Params, Progress and Result, and 4 steps, called onPreExecute, doInBackground, onProgressUpdate and onPostExecute.

What are generic types of AsyncTask?
1 Params - type of the parameters sent to the task upon execution
2 Progress - type of the progress units published during the background computation 
3 Result - type of the result of the background computation

How to set unused generic type (ex in AsyncTask)?
Use Void

What are the steps of an asynchronous task being executed?
1 onPreExecute() - setups the task
2 doInBackground(Params...) - performs background computation that can take a long time
3 onProgressUpdate(Progress...) - used to display any form of progress in the UI while the background computation is still executing
4a onPostExecute(Result) - run on UI thread after background computations finishes
4b onCancelled() - if cancel() was invoked

When AsyncTask.onProgressUpdate() callback is called?
After a call to publishProgress(Progress...)

Which AsyncTask callback is called on which thread?
1 onPreExecute() - UI thread
2 doInBackground() - background thread
3 onProgressUpdate() - UI thread
4 onPostExecute() - UI thread

Can AsyncTask be called more than once?
No, exception will be thrown

How are multiple AsyncTasks executed - sequentially or in parallel?
- API < 1.6 - sequentially
- 1.6 <= API < 4.0 - in parallel
- API >= 4.0 - sequentially, but AsyncTask.executeOnExecutor() can be used to enable parallel execution

How to enable parallel execution of multiple AsyncTasks?
Call AsyncTask.executeOnExecutor(Executor) with THREAD_POOL_EXECUTOR or custom Executor.

What is Looper?
- Wrapper class which attaches a MessageQueue to a Thread and manages this queue. 
- MessageQueue is a structure to sequentialize simultaneous processing requests of a Thread.  
- In Android, message/request processing classes like Handler uses Looper to manage their respective MessageQueue.
- Looper = Thread + MessageQueue

What are drawbacks of AsyncTask?
1 AsyncTask keeps reference to the activity, which may have been destroyed, which may cause memory leaks and losing computation results (solution: Fragment.setRetainedInstance())
2 Pausing an activity doesn’t pause the AsyncTask














